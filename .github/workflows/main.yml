name: Rust Cross-Platform Build

on:
  workflow_dispatch:
  release:
    types: [released]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: GModPatchTool-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: GModPatchTool-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: GModPatchTool-macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          cache: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release artifacts
        run: |
          if [ "${{ runner.os }}" = "Windows" ]; then
            mkdir -p dist
            cp target/${{ matrix.target }}/release/gmodpatchtool.exe dist/
            cd dist
            Compress-Archive -Path gmodpatchtool.exe -DestinationPath ${{ matrix.artifact_name }}.zip
          else
            mkdir -p dist
            cp target/${{ matrix.target }}/release/gmodpatchtool dist/${{ matrix.artifact_name }}
            if [ "${{ runner.os }}" = "macOS" ]; then
              # Create DMG package for macOS if needed
              echo "macOS artifact created: ${{ matrix.artifact_name }}"
            fi
          fi

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: dist/*
          tag_name: ${{ github.ref }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}