name: Rust Cross-Platform Build

on:
  workflow_dispatch:
  release:
    types: [released]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: GModPatchTool-linux
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: GModPatchTool-windows
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: GModPatchTool-macos

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          cache: true

      - name: Install LLD linker (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y lld clang

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-${{ matrix.target }}-

      - name: Install cargo-chef
        run: cargo install cargo-chef --locked

      - name: Generate cargo-chef recipe
        run: cargo chef prepare --recipe-path recipe.json --workspace

      - name: Cook cached dependencies (cargo-chef)
        run: cargo chef cook --release --target ${{ matrix.target }} --recipe-path recipe.json

      - name: Build release binary
        env:
          # 启用链接时优化（LTO）
          CARGO_PROFILE_RELEASE_LTO: "true"
          # 设置优化级别为最小大小
          CARGO_PROFILE_RELEASE_OPT_LEVEL: "z"
          # 禁用增量编译以获得更好的优化
          CARGO_PROFILE_RELEASE_INCREMENTAL: "false"
          # 设置代码生成单元为1
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: "1"
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create release artifacts (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          mkdir dist
          Copy-Item "target/${{ matrix.target }}/release/gmodpatchtool.exe" "dist/"
          Compress-Archive -Path "dist/gmodpatchtool.exe" -DestinationPath "dist/${{ matrix.artifact_name }}.zip"

      - name: Create release artifacts (macOS/Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/gmodpatchtool dist/${{ matrix.artifact_name }}
          # macOS DMG打包可在此扩展

      - name: Upload release artifacts
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'release'
        with:
          files: dist/*
          tag_name: ${{ github.ref }}
          repository: ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}